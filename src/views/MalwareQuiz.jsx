import React, { useState } from 'react';
import {
  Container,
  Typography,
  Button,
  Grid,
  Paper,
  useMediaQuery,
} from '@mui/material';
import questions from '../components/MalwareQuestions';

const MalwareQuizView = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showScore, setShowScore] = useState(false);
  const [score, setScore] = useState(0);
  const isMobile = useMediaQuery((theme) => theme.breakpoints.down('sm'));
  const [currentQuestionStatus, setCurrentQuestionStatus] = useState(undefined);

  const handleAnswerOptionClick = (isCorrect) => {
    if (isCorrect) {
      setScore(score + 1);
      setCurrentQuestionStatus('Correct!');
    } else {
      setCurrentQuestionStatus('Incorrect!');
    }
  };

  const handleClickNext = () => {
    const nextQuestion = currentQuestion + 1;
    setCurrentQuestionStatus(undefined);
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    } else {
      setShowScore(true);
    }
  };

  return (
    <Container
      maxWidth="lg"
      sx={{
        pr: 0,
        pl: 0,
      }}
    >
      <Paper
        sx={{
          p: 2,
        }}
        elevation={isMobile ? 0 : 3}
      >
        {!showScore ? (
          <>
            <Typography component="h1" variant="h4" gutterBottom>
              Question {currentQuestion + 1}
              <Typography component="span" variant="h6">
                /{questions.length}
              </Typography>
            </Typography>

            <Typography variant="subtitle1" gutterBottom>
              {questions[currentQuestion].questionText}
            </Typography>
            <Grid container spacing={1}>
              {questions[currentQuestion].answerOptions.map((answerOption) => (
                <Grid item xs={12} sm={6} md={3} key={answerOption.answerText}>
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() =>
                      handleAnswerOptionClick(answerOption.isCorrect)
                    }
                    sx={{
                      mb: 1,
                    }}
                    fullWidth
                    disabled={currentQuestionStatus}
                  >
                    {answerOption.answerText}
                  </Button>
                </Grid>
              ))}
            </Grid>

            {currentQuestionStatus && (
              <>
                <Typography variant="subtitle2">
                  {currentQuestionStatus}
                </Typography>
                <Button
                  variant="contained"
                  size="small"
                  onClick={handleClickNext}
                >
                  {currentQuestion < questions.length
                    ? 'Next Question'
                    : 'Finish Quiz'}
                </Button>
              </>
            )}
          </>
        ) : (
          <>
            <Typography component="h1" variant="h3" align="center" gutterBottom>
              You scored {score} out of {questions.length}
            </Typography>
            <Button
              variant="contained"
              size="large"
              fullWidth
              onClick={() => {
                setScore(0);
                setCurrentQuestion(0);
                setShowScore(false);
              }}
            >
              Try again
            </Button>
          </>
        )}
      </Paper>
    </Container>
  );
};

export default MalwareQuizView;
